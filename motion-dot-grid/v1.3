<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Interactive Dots</title>
    <style>
        canvas {
            display: block;
        }
        #controls {
            position: fixed;
            top: 10px;
            left: 10px;
            background: #fff;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 5px;
            z-index: 1000;
        }
    </style>
</head>
<body>
    <div id="controls">
        <label>
            Dot Radius:
            <input type="number" id="dotRadius" value="2" step="1">
        </label><br>
        <label>
            Gap:
            <input type="number" id="gap" value="10" step="1">
        </label><br>
        <label>
            Scale Factor:
            <input type="number" id="scaleFactor" value="3" step="1">
        </label><br>
        <label>
            Gradient Factor:
            <input type="number" id="gradientFactor" value="0.2" step="0.1">
        </label><br>
        <label>
            Max Distance:
            <input type="number" id="maxDistance" value="10" step="1">
        </label><br>
        <label>
            Dot Color:
            <input type="color" id="dotColor" value="#CCCCCC">
        </label><br>
        <label>
            Shrink:
            <input type="checkbox" id="allowShrink">
        </label>
    </div>
    <div id="dots" style="width: 100%; height: 100vh;">
        <canvas id="dotCanvas"></canvas>
    </div>

    <script>
        const container = document.getElementById('dots');
        const canvas = document.getElementById('dotCanvas');
        const ctx = canvas.getContext('2d');

        // Get device pixel ratio (DPI)
        const dpi = window.devicePixelRatio;

        // Fix canvas DPI to prevent blurriness
        function fixDPI() {
            const styleHeight = +getComputedStyle(canvas).getPropertyValue("height").slice(0, -2);
            const styleWidth = +getComputedStyle(canvas).getPropertyValue("width").slice(0, -2);

            canvas.setAttribute('height', styleHeight * dpi);
            canvas.setAttribute('width', styleWidth * dpi);

            ctx.scale(dpi, dpi);
        }

        // Resize canvas to match container dimensions and fix DPI
        function resizeCanvas() {
            canvas.style.width = `${container.clientWidth}px`;
            canvas.style.height = `${container.clientHeight}px`;
            fixDPI();
        }

        resizeCanvas();

        // Adjustable variables
        let dotRadius = 2; // Base radius of dots
        let gap = 12; // Gap between dots
        let scaleFactor = 3; // Maximum scale factor
        let gradientFactor = 0.2; // Scale reduction per distance
        let maxDistance = 10; // Maximum number of dots affected
        let dotColor = "#CCC"; // Dot color
        let allowShrink = false; // Allow dots to shrink

        // Utility to draw a single dot
        function drawDot(x, y, scale) {
            const radius = Math.max(0.5, dotRadius * scale); // Ensure dots do not disappear
            ctx.beginPath();
            ctx.arc(x, y, radius, 0, 2 * Math.PI);
            ctx.fillStyle = dotColor; // Set the color of the dot
            ctx.fill();
        }

        // Function to draw the grid of dots
        function drawGrid(mouseX, mouseY) {
            ctx.clearRect(0, 0, canvas.width, canvas.height);

            const rows = Math.ceil(canvas.height / gap);
            const cols = Math.ceil(canvas.width / gap);

            for (let row = 0; row < rows; row++) {
                for (let col = 0; col < cols; col++) {
                    const x = col * gap + gap / 2;
                    const y = row * gap + gap / 2;

                    // Calculate distance to mouse pointer
                    const dx = x - mouseX;
                    const dy = y - mouseY;
                    const distance = Math.sqrt(dx * dx + dy * dy);
                    const steps = Math.floor(distance / gap);

                    // Calculate scale based on distance
                    let scale = 1;
                    if (steps < maxDistance) {
                        if (allowShrink) {
                            // Closest dots shrink, farther dots return to original size
                            scale = 1 - ((scaleFactor - 1) - steps * gradientFactor);
                        } else {
                            // Closest dots grow, farther dots return to original size
                            scale = scaleFactor - steps * gradientFactor;
                        }
                        scale = Math.max(0.1, scale); // Minimum scale to prevent disappearing dots
                    }

                    drawDot(x, y, scale);
                }
            }
        }

        // Mouse movement handler
        canvas.addEventListener('mousemove', (e) => {
            const rect = canvas.getBoundingClientRect();
            const mouseX = (e.clientX - rect.left) * dpi;
            const mouseY = (e.clientY - rect.top) * dpi;

            drawGrid(mouseX / dpi, mouseY / dpi);
        });

        // Handle window resize
        window.addEventListener('resize', () => {
            resizeCanvas();
            drawGrid(-gap, -gap); // Default to a position offscreen
        });

        // Update variables based on user input
        document.getElementById('dotRadius').addEventListener('input', (e) => {
            dotRadius = parseFloat(e.target.value);
        });
        document.getElementById('gap').addEventListener('input', (e) => {
            gap = parseFloat(e.target.value);
        });
        document.getElementById('scaleFactor').addEventListener('input', (e) => {
            scaleFactor = parseFloat(e.target.value);
        });
        document.getElementById('gradientFactor').addEventListener('input', (e) => {
            gradientFactor = parseFloat(e.target.value);
        });
        document.getElementById('maxDistance').addEventListener('input', (e) => {
            maxDistance = parseInt(e.target.value, 10);
        });
        document.getElementById('dotColor').addEventListener('input', (e) => {
            dotColor = e.target.value;
        });
        document.getElementById('allowShrink').addEventListener('change', (e) => {
            allowShrink = e.target.checked;
        });

        // Initial rendering
        drawGrid(-gap, -gap); // Default to a position offscreen
    </script>
</body>
</html>
